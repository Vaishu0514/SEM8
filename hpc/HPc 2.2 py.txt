import multiprocessing
import time

def merge(arr, left, mid, right):
    n1 = mid - left + 1
    n2 = right - mid
    L = arr[left:mid+1]
    R = arr[mid+1:right+1]
    i = j = 0
    k = left

    while i < n1 and j < n2:
        if L[i] < R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1

    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1

    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1

def sequential_mergesort(arr, left, right):
    if left < right:
        mid = (left + right) // 2
        sequential_mergesort(arr, left, mid)
        sequential_mergesort(arr, mid + 1, right)
        merge(arr, left, mid, right)

def parallel_mergesort(arr, left, right, depth=0):
    if left < right:
        if depth >= 3:  # Limit recursion depth to avoid too many processes
            sequential_mergesort(arr, left, right)
            return

        mid = (left + right) // 2
        left_proc = multiprocessing.Process(target=parallel_mergesort, args=(arr, left, mid, depth+1))
        right_proc = multiprocessing.Process(target=parallel_mergesort, args=(arr, mid+1, right, depth+1))
        left_proc.start()
        right_proc.start()
        left_proc.join()
        right_proc.join()
        merge(arr, left, mid, right)

def main():
    n = int(input("Enter total number of elements => "))
    arr = []
    print("Enter elements =>")
    for _ in range(n):
        arr.append(int(input()))

    arr_seq = arr.copy()
    arr_par = arr.copy()

    # Sequential Merge Sort
    start_time = time.time()
    sequential_mergesort(arr_seq, 0, n-1)
    end_time = time.time()
    print("\nSequential Time:", end_time - start_time)

    # Parallel Merge Sort
    start_time = time.time()
    shared_array = multiprocessing.Array('i', arr_par)  # Shared memory
    parallel_mergesort(shared_array, 0, n-1)
    end_time = time.time()
    print("\nParallel Time:", end_time - start_time)

    print("\nSorted array is =>")
    for val in shared_array:
        print(val, end=" ")

if __name__ == "__main__":
    multiprocessing.set_start_method("fork")  # Important for Unix/Linux
    main()
